extern crate cc;

fn main()
{
    cc::Build::new()
        .cpp(true)
        .std("c++17")
        .file("src/util/panic.cpp")
        .file("src/util/os_callstack.cpp")
        .file("src/util/simd.cpp")
        .file("src/mem/allocator.cpp")
        .file("src/mem/os_mem.cpp")
        .file("src/mem/protected_allocator.cpp")
        .file("src/threading/sync_queue.cpp")
        .file("src/threading/sync_obj_val.cpp")
        .file("src/types/type_info.cpp")
        .file("src/types/function/function.cpp")
        .file("src/types/string/string_slice.cpp")
        .file("src/types/string/string.cpp")
        .file("src/types/sync_obj/sync_obj.cpp")
        .file("src/types/array/dynamic_array.cpp")
        .file("src/types/hash/groups.cpp")
        .file("src/types/hash/map.cpp")
        .file("src/types/option/option.cpp")
        .file("src/types/result/result.cpp")
        .file("src/types/box/box.cpp")
        .file("src/interpreter/stack/frame.cpp")
        .file("src/interpreter/stack/node.cpp")
        .file("src/interpreter/stack/stack.cpp")
        .file("src/interpreter/bytecode.cpp")
        .file("src/interpreter/interpreter.cpp")
        .file("src/interpreter/function_builder.cpp")
        .file("src/compiler/compiler.cpp")
        .file("src/compiler/tokenizer/token.cpp")
        .file("src/compiler/tokenizer/tokenizer.cpp")
        .file("src/compiler/tokenizer/file_literals.cpp")
        .file("src/compiler/graph/scope.cpp")
        .file("src/compiler/graph/module_dependency_graph.cpp")
        .file("src/compiler/source_tree/source_tree.cpp")
        .file("src/compiler/parser/parser.cpp")
        .file("src/compiler/parser/base_nodes.cpp")
        .file("src/compiler/parser/stack_variables.cpp")
        .file("src/compiler/parser/type_resolution.cpp")
        .file("src/compiler/parser/expression.cpp")
        .file("src/compiler/parser/ast/function_definition.cpp")
        .file("src/compiler/parser/ast/return.cpp")
        .file("src/program/program.cpp")
        .file("src/program/program_error.cpp")
        .file("src/testing/child_process.cpp")
        .file("test/test_runner.cpp")
        .compile("SyncLib");
}
